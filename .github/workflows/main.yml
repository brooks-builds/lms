name: Yew Component Library
on: 
  push:
  pull_request:
  release:
    types: [published]
jobs:
  lint:
    name: Cargo check and check formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            components: rustfmt, clippy
      - name: cargo check
        run: touch .env && cargo check --lib
        env:
            RUST_ENV: test
            GRAPHQL_URI: http://localhost:8081
            AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
            AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
            AUTH_REDIRECT_URI: ${{ secrets.AUTH_REDIRECT_URI }}
            LOGOUT_REDIRECT: http://localhost:8082
      - name: cargo clippy
        run: touch .env && cargo clippy -- -Dwarnings
        env:
            RUST_ENV: test
            GRAPHQL_URI: http://localhost:8081
            AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
            AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
            AUTH_REDIRECT_URI: ${{ secrets.AUTH_REDIRECT_URI }}
            LOGOUT_REDIRECT: http://localhost:8082
      - name: check formatting
        run: touch .env && cargo fmt --check
        env:
            RUST_ENV: test
            GRAPHQL_URI: http://localhost:8081
            AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
            AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
            AUTH_REDIRECT_URI: ${{ secrets.AUTH_REDIRECT_URI }}
            LOGOUT_REDIRECT: http://localhost:8082

  deploy:
    if: github.event_name == 'release' && github.event.action == 'published'
    name: deploy to production
    runs-on: ubuntu-latest
    needs:
      - lint
    steps:
      - uses: actions/checkout@v3
      - name: install prerequisites
        run: |
          rustup target add wasm32-unknown-unknown
          cargo install --locked trunk
      - name: install component Library
        run: |
          cd ..
          git clone https://github.com/brooks-builds/ycl.git
      - name: build
        run: |
          touch .env 
          mkdir test-results
          trunk build --release
        env:
            RUST_ENV: production
            GRAPHQL_URI: ${{ secrets.GRAPHQL_API_URI }}
            AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
            AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
            AUTH_REDIRECT_URI: https://learning.brooksbuilds.com/auth/redirect
            LOGOUT_REDIRECT: https://learning.brooksbuilds.com/
      - name: deploy
        run: aws s3 sync dist ${{ secrets.DEPLOYMENT_URI }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
      - name: invalidate cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID }} --paths "/index.html"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
  mark_release:
    needs:
      - deploy
    name: mark release in Sentry
    runs-on: ubuntu-latest
    steps:
      - name: Install Sentry
        run: curl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION="2.2.0" bash
      - name: submit new version
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: brooks-builds
          SENTRY_PROJECT: lms
          VERSION: sentry-cli releases propose-version
        run: |
          sentry-cli releases new "$VERSION"
          sentry-cli releases set-commits "$VERSION" --auto
          sentry-cli releases finalize "$VERSION"